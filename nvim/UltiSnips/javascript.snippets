#################
### ES6 ######
#################

snippet 6f "es6 function" b
const $1 = ($2) => {
	$3
}
endsnippet

snippet ws "wrapped in es6 string" b
\`$1${VISUAL}\`
endsnippet

snippet wsv "wrapped in es6 string value" b
\$\{$1${VISUAL}\}
endsnippet

#####################
### Redux/Flux ######
####################
snippet mstp 
const mapStateToProps = state => ({
	$1
})
endsnippet

snippet mdtp 
const mapDispatchToProps = dispatch => ({
	$1
})
endsnippet

snippet psel "Property Selector" b
$1:get${1/\w+\s*/\u$0/g}(state)$2
endsnippet

snippet red
const $1 = (state = $2 , action ) => {
	switch(action.type) {
		case $3:
			${4:return action.payload}
	}
	return state
}
endsnippet

snippet "sel(ect)?" "state tree selector" br
export const get${1:MountPoint} =  R.compose(state => state.${1/\w+\s*/\l$0/g}, getState)
endsnippet


snippet ac "Rdux/Flux action constant" b
export const $1 = '$1'
endsnippet


#########################
### React ###############
#########################

snippet react
import React from 'react'
endsnippet

snippet rc "React Component" b
class $0 extends React.Component {
	constructor(props) {
		super(props)
	}

	render() {
		$1
	}
}
endsnippet

snippet rfc "React Pure Functional Component" b
const $1 = ($2) => (
	$3${VISUAL}
)
endsnippet

# React Life Cycle
snippet cdm "React ComponentDidMount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwm "React componentWillMount" b
componentWillMount() {
	$1
}
endsnippet

snippet cwrp "React componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scu "React shouldComponentUpdate" b
shouldComponentUpdate(nextProps,nextState) {
	$1
}
endsnippet

snippet cwu "React componentWillUpdate" b
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdu "React componentDidUpdate" b
componentDidUpdate(prevProps prevState) {
	$1
}
endsnippet

snippet cwum "React componentWillUnmount" b
componentWillUnmount(){
	$1
}
endsnippet

#########################
### JSX ###############
#########################
snippet rjsx "Wrapp in return for jsx"
return (
	$1${VISUAL}
)
endsnippet

#####################
### TEST       ######
#####################
snippet shld "jest it test function"
it('should $1', () => {
})
endsnippet

snippet rashld "jest redux action test function"
it('should dispatch $1', () => {
  const store = mockStore({})
  return store.dispatch($2)
  .then(() => {
			const actualActions= store.getActions()
			//expect(actualActions[0].type).toBe(actions.STORE_UNIT_MAP)
			$3
  })
})
endsnippet
#####################
### Functional ######
#####################
snippet fromN "data.maybe"
import { fromNullable, Just, Nothing } from 'data.maybe'
endsnippet

snippet conn "redux"
import { connect } from 'react-redux'
endsnippet

snippet styled "sytled-componentsk"
import styled from 'styled-components'
endsnippet

snippet ramda "ramda js import"
import R from 'ramda'
endsnippet

snippet bind "bind react component funcion" b
this.$1 = this.$1.bind(this)
endsnippet

